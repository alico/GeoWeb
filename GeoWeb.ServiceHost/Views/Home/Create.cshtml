<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Test</title>
    <style type="text/css">
        .watermark {
            background-position: center center;
            background-size: 100%; /* CSS3 only, but not really necessary if you make a large enough image */
            position: absolute;
            width: 100%;
            height: 100%;
            margin: 0;
            z-index: 10;
        }
    </style>
    <script type="text/javascript">
        var boxes2 = [];
        var mySel = null;
        var canvasValid = false;

        // holds all our boxes


        // New, holds the 8 tiny boxes that will be our selection handles
        // the selection handles will be in this order:
        // 0  1  2
        // 3     4
        // 5  6  7
        var selectionHandles = [];

        // Hold canvas information
        var canvas;
        var ctx;
        var WIDTH;
        var HEIGHT;
        var INTERVAL = 20;  // how often, in milliseconds, we check to see if a redraw is needed

        var isDrag = false;
        var isResizeDrag = false;
        var expectResize = -1; // New, will save the # of the selection handle if the mouse is over one.
        var mx, my; // mouse coordinates

        // when set to true, the canvas will redraw everything
        // invalidate() just sets this to false right now
        // we want to call invalidate() whenever we make a change


        // The node (if any) being selected.
        // If in the future we want to select multiple objects, this will get turned into an array


        // The selection color and width. Right now we have a red selection with a small width
        var mySelColor = '#CC0000';
        var mySelWidth = 2;
        var mySelBoxColor = 'darkred'; // New for selection boxes
        var mySelBoxSize = 6;

        // we use a fake canvas to draw individual shapes for selection testing
        var ghostcanvas;
        var gctx; // fake canvas context

        // since we can drag from anywhere in a node
        // instead of just its x/y corner, we need to save
        // the offset of the mouse when we start dragging.
        var offsetx, offsety;

        // Padding and border style widths for mouse offsets
        var stylePaddingLeft, stylePaddingTop, styleBorderLeft, styleBorderTop;


        (function (window) {

            // Box object to hold data
            function Box2() {
                this.id = 0;
                this.type = "Rectangle";
                this.x = 0;
                this.y = 0;
                this.w = 1; // default width and height?
                this.h = 1;
                this.x2 = 0;
                this.y2 = 0;
                this.fill = '#444444';
                this.lineWidth = 2;
                this.strokeStyle = 'black';
                this.isDashed = false;
                this.expand = 1;
            }

            // New methods on the Box class
            Box2.prototype = {
                // we used to have a solo draw function
                // but now each box is responsible for its own drawing
                // mainDraw() will call this with the normal canvas
                // myDown will call this with the ghost canvas with 'black'
                draw: function (context, optionalColor) {

                    if (context === gctx) {
                        context.fillStyle = 'white'; // always want black for the ghost canvas
                    } else {
                        if (this.fill == '')
                            this.fill = 'white';
                        context.fillStyle = this.fill;
                    }

                    if (this.isDashed == true)
                        context.setLineDash([6]);
                    else {
                        context.setLineDash([0]);
                    }
              


                    // We can skip the drawing of elements that have moved off the screen:
                    if (this.x > WIDTH || this.y > HEIGHT) return;
                    if (this.x + this.w < 0 || this.y + this.h < 0) return;

                    if (this.type == 'Rectangle') {
                        context.beginPath();
                        context.rect(this.x, this.y, this.w, this.h);
                        context.fill();
                        context.lineWidth = this.lineWidth;
                        context.strokeStyle = this.strokeStyle;
                        context.stroke();
                        context.closePath();

                    }
                    else if (this.type == 'Square') {
                        context.beginPath();

                        context.rect(this.x, this.y, this.w, this.w);
                        context.fill();
                        context.lineWidth = this.lineWidth;
                        context.strokeStyle = this.strokeStyle;
                        context.stroke();
                        context.closePath();

                    }
                    else if (this.type == 'Circle') {

                        context.beginPath();

                        context.arc(this.x, this.y, this.w, 0, 2 * Math.PI);
                        context.fill();
                        context.lineWidth = this.lineWidth;
                        context.strokeStyle = this.strokeStyle;
                        context.stroke();
                        context.closePath();
                    }
                    else if (this.type == 'Line') {

                        context.beginPath();
                        context.moveTo(this.x, this.x);
                        context.lineTo(this.x1, this.y1);
                        context.lineWidth = this.width;
                        context.stroke();
                        context.closePath();
                    }
                    //else if (this.type == 'Triangle') {

                    //    context.beginPath();
                    //    context.moveTo(100, 20);
                    //    context.lineTo(100, 100);
                    //    context.lineTo(200, 100);
                    //    context.closePath();

                    //    // the outline
                    //    context.lineWidth = 10;
                    //    context.strokeStyle = '#666666';
                    //    context.stroke();

                    //    // the fill color
                    //    context.fillStyle = "#FFCC00";
                    //    context.fill();
                    //}


                    // draw selection
                    // this is a stroke along the box and also 8 new selection handles
                    if (mySel === this) {
                        context.strokeStyle = mySelColor;
                        context.lineWidth = mySelWidth;

                        if (this.type == "Rectangle")
                            context.strokeRect(this.x, this.y, this.w, this.h);
                        else if (this.type == 'Square')
                            context.fillRect(this.x, this.y, this.w, this.w);
                        else if (this.type == 'Circle') {
                            context.beginPath();
                            context.arc(this.x, this.y, this.w, 0, 2 * Math.PI, false);
                            context.stroke();
                        }
                        else if (this.type == 'Line') {
                            context.beginPath();
                            context.moveTo(this.x, this.x);
                            context.lineTo(this.x1, this.y1);
                            context.lineWidth = this.width;
                            context.stroke();
                            context.closePath();
                        }
                        //else if (this.type == 'Triangle') {

                        //    context.beginPath();
                        //    context.moveTo(100, 20);
                        //    context.lineTo(100, 100);
                        //    context.lineTo(200, 100);
                        //    context.closePath();

                        //    // the outline
                        //    context.lineWidth = 10;
                        //    context.strokeStyle = '#666666';
                        //    context.stroke();

                        //    // the fill color
                        //    context.fillStyle = "#FFCC00";
                        //    context.fill();
                        //}
                        // draw the boxes

                        var half = mySelBoxSize / 2;

                        // 0  1  2
                        // 3     4
                        // 5  6  7
                        selectionHandles = [];
                        for (var i = 0; i < 8; i++) {
                            var rect = new Box2;
                            selectionHandles.push(rect);
                        }


                        if (this.type == "Square") {
                            // top left, middle, right
                            selectionHandles[0].x = this.x - half;
                            selectionHandles[0].y = this.y - half;

                            selectionHandles[2].x = this.x + this.w - half;
                            selectionHandles[2].y = this.y - half;

                            selectionHandles[5].x = this.x - half;
                            selectionHandles[5].y = this.y + this.w - half;

                            selectionHandles[7].x = this.x + this.w - half;
                            selectionHandles[7].y = this.y + this.w - half;
                        }
                        else if (this.type == "Circle") {
                            // top left, middle, right
                            selectionHandles[0].x = this.x - half - this.w;
                            selectionHandles[0].y = this.y - half - this.w;

                            selectionHandles[2].x = this.x + this.w - half;
                            selectionHandles[2].y = this.y - half - this.w;

                            selectionHandles[5].x = this.x - half - this.w;
                            selectionHandles[5].y = this.y - half + this.w;

                            selectionHandles[7].x = this.x + this.w - half;
                            selectionHandles[7].y = this.y + this.w - half;
                        }
                        else if (this.type == "Line") {
                            // top left, middle, right
                            selectionHandles[0].x = this.x;
                            selectionHandles[0].y = this.y;

                            selectionHandles[1].x = (this.x1 - this.x) / 2;
                            selectionHandles[1].y = (this.y1 - this.y) / 2;

                            selectionHandles[2].x = this.x1;
                            selectionHandles[2].y = this.y1;
                        }
                        else {
                            // top left, middle, right
                            selectionHandles[0].x = this.x - half;
                            selectionHandles[0].y = this.y - half;

                            selectionHandles[1].x = this.x + this.w / 2 - half;
                            selectionHandles[1].y = this.y - half;

                            selectionHandles[2].x = this.x + this.w - half;
                            selectionHandles[2].y = this.y - half;

                            //middle left
                            selectionHandles[3].x = this.x - half;
                            selectionHandles[3].y = this.y + this.h / 2 - half;

                            //middle right
                            selectionHandles[4].x = this.x + this.w - half;
                            selectionHandles[4].y = this.y + this.h / 2 - half;

                            //bottom left, middle, right
                            selectionHandles[6].x = this.x + this.w / 2 - half;
                            selectionHandles[6].y = this.y + this.h - half;

                            selectionHandles[5].x = this.x - half;
                            selectionHandles[5].y = this.y + this.h - half;

                            selectionHandles[7].x = this.x + this.w - half;
                            selectionHandles[7].y = this.y + this.h - half;
                        }



                        context.fillStyle = mySelBoxColor;
                        for (var i = 0; i < selectionHandles.length; i++) {
                            var cur = selectionHandles[i];

                            context.fillRect(cur.x, cur.y, mySelBoxSize, mySelBoxSize);
                        }


                        //context.arc(50, 50, 20, 0, 2 * Math.PI, false);
                        //context.fillStyle = 'green';
                        //context.fill();
                        ////context.lineWidth = 5;
                        //context.strokeStyle = '#003300';
                        //context.stroke();

                    }

                } // end draw

            }

            //Initialize a new Box, add it, and invalidate the canvas
            function addRect(x, y, w, h, fill, type, lineWidth, strokeStyle, isDashed, x1, y1) {

                var rect = new Box2;
                rect.id = boxes2.length;
                rect.x = x;
                rect.y = y;
                rect.x1 = x1;
                rect.y1 = y1;
                rect.w = w
                rect.h = h;
                rect.type = type;
                rect.fill = fill;
                rect.lineWidth = lineWidth;
                rect.strokeStyle = strokeStyle;
                rect.isDashed = isDashed;
                boxes2.push(rect);
                invalidate();
            }

            // initialize our canvas, add a ghost canvas, set draw loop
            // then add everything we want to intially exist on the canvas
            function init2() {
                $('.line').hide();
                canvas = document.getElementById('canvas2');
                HEIGHT = canvas.height;
                WIDTH = canvas.width;
                ctx = canvas.getContext('2d');
                ghostcanvas = document.createElement('canvas');
                ghostcanvas.height = HEIGHT;
                ghostcanvas.width = WIDTH;
                gctx = ghostcanvas.getContext('2d');

                ctx.fillStyle = "#white";

                //fixes a problem where double clicking causes text to get selected on the canvas
                canvas.onselectstart = function () { return false; }

                // fixes mouse co-ordinate problems when there's a border or padding
                // see getMouse for more detail
                if (document.defaultView && document.defaultView.getComputedStyle) {
                    stylePaddingLeft = parseInt(document.defaultView.getComputedStyle(canvas, null)['paddingLeft'], 10) || 0;
                    stylePaddingTop = parseInt(document.defaultView.getComputedStyle(canvas, null)['paddingTop'], 10) || 0;
                    styleBorderLeft = parseInt(document.defaultView.getComputedStyle(canvas, null)['borderLeftWidth'], 10) || 0;
                    styleBorderTop = parseInt(document.defaultView.getComputedStyle(canvas, null)['borderTopWidth'], 10) || 0;
                }

                // make mainDraw() fire every INTERVAL milliseconds
                setInterval(mainDraw, INTERVAL);

                // set our events. Up and down are for dragging,
                // double click is for making new boxes
                canvas.onmousedown = myDown;
                canvas.onmouseup = myUp;
                canvas.ondblclick = myDblClick;
                canvas.onmousemove = myMove;

                //// set up the selection handle boxes
                //for (var i = 0; i < 8; i++) {
                //    var rect = new Box2;
                //    selectionHandles.push(rect);
                //}

                // add custom initialization here:

                // add a large green rectangle
                //////addRect(260, 70, 60, 65, 'rgba(0,205,0,0.7)', 'Rectangle');

                //////// add a green-blue rectangle
                //////addRect(240, 120, 20, 20, 'rgba(2,165,165,0.7)', 'Circle');



                //////addRect(0, 0, 30, 30, 'rgba(2,165,165,0.7)', 'Line', 50, 50);

                //////addRect(80, 80, 30, 30, 'rgba(2,165,165,0.7)', 'Square', 50, 50);


                //addRect(80, 80, 30, 30, 'rgba(2,165,165,0.7)', 'Triangle', 50, 50);

                // add a smaller purple rectangle
                //addRect(45, 60, 30, 20, 'rgba(150,150,250,0.7)','Circle');
            }




            // Main draw loop.
            // While draw is called as often as the INTERVAL variable demands,
            // It only ever does something if the canvas gets invalidated by our code


            // Happens when the mouse is moving inside the canvas
            function myMove(e) {

                if (isDrag) {

                    getMouse(e);

                    if (mySel.type == "Line") {
                        mySel.x = mx + offsetx;
                        mySel.y = my + offsety;

                        mySel.x1 = mx - offsetx;
                        mySel.y1 = my - offsety;


                    }
                    else {
                        mySel.x = mx - offsetx;
                        mySel.y = my - offsety;
                    }


                    // something is changing position so we better invalidate the canvas!
                    invalidate();
                } else if (isResizeDrag) {
                    // time ro resize!
                    var oldx = mySel.x;
                    var oldy = mySel.y;

                    // 0  1  2
                    // 3     4
                    // 5  6  7
                    switch (expectResize) {
                        case 0:
                            mySel.x = mx;
                            mySel.y = my;
                            mySel.w += oldx - mx;
                            mySel.h += oldy - my;
                            break;
                        case 1:
                            mySel.y = my;
                            mySel.h += oldy - my;
                            break;
                        case 2:
                            mySel.y = my;
                            mySel.w = mx - oldx;
                            mySel.h += oldy - my;
                            break;
                        case 3:
                            mySel.x = mx;
                            mySel.w += oldx - mx;
                            break;
                        case 4:
                            mySel.w = mx - oldx;
                            break;
                        case 5:
                            mySel.x = mx;
                            mySel.w += oldx - mx;
                            mySel.h = my - oldy;
                            break;
                        case 6:
                            mySel.h = my - oldy;
                            break;
                        case 7:
                            mySel.w = mx - oldx;
                            mySel.h = my - oldy;
                            break;
                    }

                    invalidate();
                }

                getMouse(e);
                // if there's a selection see if we grabbed one of the selection handles
                if (mySel !== null && !isResizeDrag) {
                    for (var i = 0; i < 8; i++) {
                        // 0  1  2
                        // 3     4
                        // 5  6  7

                        var cur = selectionHandles[i];

                        // we dont need to use the ghost context because
                        // selection handles will always be rectangles
                        if (mx >= cur.x && mx <= cur.x + mySelBoxSize &&
                            my >= cur.y && my <= cur.y + mySelBoxSize) {
                            // we found one!
                            expectResize = i;
                            invalidate();

                            switch (i) {
                                case 0:
                                    this.style.cursor = 'nw-resize';
                                    break;
                                case 1:
                                    this.style.cursor = 'n-resize';
                                    break;
                                case 2:
                                    this.style.cursor = 'ne-resize';
                                    break;
                                case 3:
                                    this.style.cursor = 'w-resize';
                                    break;
                                case 4:
                                    this.style.cursor = 'e-resize';
                                    break;
                                case 5:
                                    this.style.cursor = 'sw-resize';
                                    break;
                                case 6:
                                    this.style.cursor = 's-resize';
                                    break;
                                case 7:
                                    this.style.cursor = 'se-resize';
                                    break;
                            }
                            return;
                        }

                    }
                    // not over a selection box, return to normal
                    isResizeDrag = false;
                    expectResize = -1;
                    this.style.cursor = 'auto';
                }

            }

            // Happens when the mouse is clicked in the canvas
            function myDown(e) {
                getMouse(e);

                //we are over a selection box
                if (expectResize !== -1) {
                    isResizeDrag = true;
                    return;
                }

                clear(gctx);
                var l = boxes2.length;
                for (var i = l - 1; i >= 0; i--) {
                    // draw shape onto ghost context
                    boxes2[i].draw(gctx, 'black');

                    // get image data at the mouse x,y pixel
                    var imageData = gctx.getImageData(mx, my, 1, 1);
                    var index = (mx + my * imageData.width) * 4;

                    // if the mouse pixel exists, select and break
                    if (imageData.data[3] > 0) {
                        mySel = boxes2[i];
                        offsetx = mx - mySel.x;
                        offsety = my - mySel.y;
                        mySel.x = mx - offsetx;
                        mySel.y = my - offsety;
                        isDrag = true;

                        invalidate();
                        clear(gctx);
                        return;
                    }

                }
                // havent returned means we have selected nothing
                mySel = null;
                // clear the ghost canvas for next time
                clear(gctx);
                // invalidate because we might need the selection border to disappear
                invalidate();
            }

            function myUp() {
                isDrag = false;
                isResizeDrag = false;
                expectResize = -1;
            }

            // adds a new node
            function myDblClick(e) {
                getMouse(e);
                // for this method width and height determine the starting X and Y, too.
                // so I left them as vars in case someone wanted to make them args for something and copy this code
                var width = $('#Width').val();
                var height = $('#Width').val();
                var type = $('#Shape').val();
                var fill = "white";
                var isDashed = false;
                var borderColor = "black";
                var borderWidth = "2";

                if ($('#Effect').val() == 'Fill') {
                    fill = $('#EffectValue').val();
                }
                else if ($('#Effect').val() == 'BorderWidth') {
                    borderWidth = $('#EffectValue').val();
                }
                else if ($('#Effect').val() == 'BorderColor') {
                    borderColor = $('#EffectValue').val();
                }

                var x1 = $('#X1').val();
                var y1 = $('#Y1').val();


                isDashed = $('#Dashed').prop('checked');

                addRect(mx - (width / 2), my - (height / 2), width, height, fill, type, borderWidth, borderColor, isDashed, x1, y1);
            }

            function invalidate() {
                canvasValid = false;
            }

            // Sets mx,my to the mouse position relative to the canvas
            // unfortunately this can be tricky, we have to worry about padding and borders
            function getMouse(e) {
                var element = canvas, offsetX = 0, offsetY = 0;

                if (element.offsetParent) {
                    do {
                        offsetX += element.offsetLeft;
                        offsetY += element.offsetTop;
                    } while ((element = element.offsetParent));
                }

                // Add padding and border style widths to offset
                offsetX += stylePaddingLeft;
                offsetY += stylePaddingTop;

                offsetX += styleBorderLeft;
                offsetY += styleBorderTop;

                mx = e.pageX - offsetX;
                my = e.pageY - offsetY
            }

            // If you dont want to use <body onLoad='init()'>
            // You could uncomment this init() reference and place the script reference inside the body tag
            //init();
            window.init2 = init2;
        })(window);

        //wipes the canvas context
        function clear(c) {
            //debugger;
            c.clearRect(0, 0, WIDTH, HEIGHT);


            //c.globalCompositeOperation = 'destination-out'
            //c.arc(0, 0, 20, 0, Math.PI * 2, true);
            //c.fill();


        }

        function mainDraw() {

            if (canvasValid == false) {
                clear(ctx);

                // Add stuff you want drawn in the background all the time here

                // draw all boxes
                var l = boxes2.length;
                for (var i = 0; i < l; i++) {
                    boxes2[i].draw(ctx); // we used to call drawshape, but now each box draws itself
                }

                // Add stuff you want drawn on top all the time here

                canvasValid = true;
            }
        }

        function SaveImage() {

            var complexShape = new Object();
            complexShape.Name = $('#Name').val();

            var complexShapeEffects = [];
            var complexShapeEffect = new Object();
            complexShapeEffect.EffectType = 'BackgroundColor';
            complexShapeEffect.Value = $('#canvas2').css('background-color');
            complexShapeEffects.push(complexShapeEffect);
            complexShape.Effects = complexShapeEffects;

            var shapes = [];

            for (var i = 0; i < boxes2.length; i++) {
                var shape = new Object();
                shape.StartPositionX = boxes2[i].x;
                shape.StartPositionY = boxes2[i].y;
                shape.EndPositionX = boxes2[i].x1;
                shape.EndPositionY = boxes2[i].x2;
                shape.Width = boxes2[i].w;
                shape.Type = boxes2[i].type;


                //shape.Effects = boxes2[i].x;
                var effects = [];


                if (boxes2[i].fill != 'white') {
                    var effect = new Object();
                    effect.EffectType = 'Fill';
                    effect.Value = boxes2[i].fill;
                    effects.push(effect);

                }
                if (boxes2[i].isDashed) {
                    var effect = new Object();
                    effect.EffectType = 'Dashed';
                    effect.Value = true;
                    effects.push(effect);
                }
                if (boxes2[i].lineWidth != '2') {
                    var effect = new Object();
                    effect.EffectType = 'BorderWidth';
                    effect.Value = boxes2[i].lineWidth;
                    effects.push(effect);
                }
                if (boxes2[i].strokeStyle != 'black') {
                    var effect = new Object();
                    effect.EffectType = 'BorderColor';
                    effect.Value = boxes2[i].strokeStyle;
                    effects.push(effect);
                }

                if (boxes2[i].expand != "1") {
                    var effect = new Object();
                    effect.EffectType = 'Expand';
                    effect.Value = boxes2[i].expand;
                    effects.push(effect);
                }

                shape.Effects = effects;
                shapes.push(shape);
            }

            complexShape.Shapes = shapes;

            $.ajax({
                type: "POST",
                url: 'Create',
                data: JSON.stringify({ complexShapeDto: complexShape }),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (data) {

                    alert('id:' + data);
                }
            });

        }

        function ShapeChanged() {
            if ($('#Shape').val() == 'Line') {
                $('.line').show();
                $('#X1').val('0');
                $('#Y1').val('0');

            }
            else {
                $('.line').hide();
                $('#X1').val('0');
                $('#Y1').val('0');
            }
        }


        function ApplyShapeEffectClick() {
            if (mySel != null) {
                if ($('#Effect').val() == 'BorderWidth') {
                    boxes2[mySel.id].lineWidth = $('#EffectValue').val();
                }
                else if ($('#Effect').val() == 'Fill') {
                    boxes2[mySel.id].fill = $('#EffectValue').val();
                }
                else if ($('#Effect').val() == 'BorderColor') {
                    boxes2[mySel.id].strokeStyle = $('#EffectValue').val();
                }
                else if ($('#Effect').val() == 'Expand') {
                    boxes2[mySel.id].expand = $('#EffectValue').val();
                }
                if ($('#Dashed').prop('checked')) {
                    boxes2[mySel.id].isDashed = true;
                }
            }
        }

        function ApplyImageEffectClick() {

            if ($('#ImageEffect').val() == 1) {
                $('#canvas2').css('background-color', $('#ImageEffectValue').val());
            }
            else if ($('#ImageEffect').val() == 2) {

            }

        }
    </script>

</head>
<body onLoad='init2()'>
    <form class="form-horizontal">
        <br />
        <br />

        <div class="row">
            <div class="col-md-4">
                <h2>Shape Tools</h2>

                <div class="form-group">
                    <label class="col-md-2 control-label" for="Shape">Shape</label>
                    <div class="col-md-10">
                        <select id="Shape" name="Shape" class="form-control" onchange="ShapeChanged()">
                            <option value="Square">Square</option>
                            <option value="Circle">Circle</option>
                            <option value="Line">Line</option>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-md-2 control-label">Width</label>
                    <div class="col-md-10">
                        <input class="form-control" id="Width" name="Width" value="50" type="text" />
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-md-2 control-label">Effect</label>
                    <div class="col-md-10">
                        <select id="Effect" name="Effect" class="form-control">
                            <option value="0">Select Effect</option>
                            <option value="BorderWidth">Border Width</option>
                            <option value="Fill">Fill</option>
                            <option value="BorderColor">Border Color</option>
                            <option value="Move">Move</option>
                            <option value="Expand">Expand</option>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-md-2 control-label">Value</label>
                    <div class="col-md-10">
                        <input class="form-control" id="EffectValue" name="EffectValue" value="" type="text" />

                    </div>
                </div>



                <div class="form-group line">
                    <label class="col-md-2 control-label"> X1</label>
                    <div class="col-md-10">
                        <input class="form-control" id="X1" name="X1" value="0" type="text" style="width:50px" />

                    </div>
                </div>


                <div class="form-group line">
                    <label class="col-md-2 control-label"> Y1</label>
                    <div class="col-md-10">
                        <input class="form-control" id="Y1" name="Y1" value="0" type="text" style="width:50px" />
                    </div>
                </div>


                <div class="form-group">
                    <label class="col-md-2 control-label"> Dashed</label>
                    <div class="col-md-10">
                        <input id="Dashed" name="Dashed" value="" type="checkbox" />
                    </div>
                </div>


                <div class="form-group">
                    <div class="col-md-2"></div>
                    <div class="col-md-10">
                        <input type="button" class="btn btn-default" value="Apply Image Effect" onclick="ApplyShapeEffectClick()" />
                    </div>
                </div>

            </div>
            <div class="col-md-4">
                <h2>Canvas</h2>
                <div style="height:100%; width:100%">
                    <canvas id="canvas2" style="border:2px solid black"></canvas>
                </div>
            </div>


            <div class="col-md-4">
                <h2>Image Tools</h2>


                <div class="form-group">
                    <label class="col-md-2 control-label" for="Shape">Effect</label>
                    <div class="col-md-10">
                        <select class="form-control" id="ImageEffect">
                            <option>Select Image Effect</option>
                            <option value="1">
                                Background Color
                            </option>
                            <option value="2">
                                WaterMark Text
                            </option>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-md-2 control-label">Value</label>
                    <div class="col-md-10">
                        <input class="form-control" type="text" id="ImageEffectValue" />
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-md-2 control-label"></label>
                    <div class="col-md-10">
                        <input class="btn btn-default" type="button" value="Apply Image Effect" onclick="ApplyImageEffectClick()" />

                    </div>
                </div>

                <br />
                <br />
                <div class="form-group">
                    <label class="col-md-2 control-label" for="Shape">Name</label>
                    <div class="col-md-10">
                        <input class="form-control" id="Name" name="Name" value="Simple Image" type="text" />
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-md-2 control-label"></label>
                    <div class="col-md-10">
                        <input class="btn btn-primary btn-lg" type="button" value="Save" onclick="SaveImage()" />
                    </div>
                </div>


            </div>
        </div>




    </form>
</body>
</html>
